export default {
    useAuth: "import { useState, useEffect, createContext, useContext } from 'react';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const __NAME__ = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session\n    const checkAuth = async () => {\n      try {\n        // Implement your auth check logic here\n        setLoading(false);\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        setLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    setLoading(true);\n    try {\n      // Implement your login logic here\n      const userData = { id: '1', email, name: 'User',password };\n      setUser(userData);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    // Implement your logout logic here\n  };\n\n  return {\n    user,\n    login,\n    logout,\n    loading\n  };\n};",
    useLocalStorage: "import { useState, useEffect } from 'react';\n\nexport const __NAME__ = <T>(key: string, initialValue: T) => {\n  // Get value from local storage or use initial value\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      if (typeof window === 'undefined') {\n        return initialValue;\n      }\n      \n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Update local storage when state changes\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      \n      if (typeof window !== 'undefined') {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Remove item from local storage\n  const removeValue = () => {\n    try {\n      setStoredValue(initialValue);\n      if (typeof window !== 'undefined') {\n        window.localStorage.removeItem(key);\n      }\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue, removeValue] as const;\n};",
};
//# sourceMappingURL=hooks.js.map